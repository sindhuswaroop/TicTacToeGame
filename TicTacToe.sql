set serveroutput on

--drop table ticTacToe;
--drop table turns;

create table ticTacToe(
row_num int,
A char,
B char,
C char
);

create table turns(
turn_num int generated by DEFAULT as IDENTITY (start with 1) not null primary key,
player char
);

create or replace procedure displayGrid is 

v1 char;
v2 char;
v3 char;
v4 char;
v5 char;
v6 char;
v7 char;
v8 char;
v9 char;

begin  
  
  select A into v1 from ticTacToe where row_num = 1;
  select B into v2 from ticTacToe where row_num = 1;
  select C into v3 from ticTacToe where row_num = 1;
  
  dbms_output.put_line(v1 ||' '|| v2 ||' ' ||v3);
  
  select A into v4 from ticTacToe where row_num = 2;
  select B into v5 from ticTacToe where row_num = 2;
  select C into v6 from ticTacToe where row_num = 2;
  
  dbms_output.put_line(''|| v4 ||' '|| v5 ||' ' ||v6);
  
  select A into v7 from ticTacToe where row_num = 3;
  select B into v8 from ticTacToe where row_num = 3;
  select C into v9 from ticTacToe where row_num = 3;
  
  dbms_output.put_line(''|| v7 ||' '|| v8 ||' ' ||v9);  
end; 
/

create or replace procedure resetGame is 
begin
    delete from ticTacToe;
    delete from turns;
    insert into turns (player) values ('_');
    insert into ticTacToe values(1, '_', '_', '_');
    insert into ticTacToe values(2, '_', '_', '_');
    insert into ticTacToe values(3, '_', '_', '_');
    commit;
    displayGrid();
end;
/

create or replace procedure checkWinner(player varchar) is

v1 char;
v2 char;
v3 char;
v4 char;
v5 char;
v6 char;
v7 char;
v8 char;
v9 char;
fplayer char;
draw int;

begin
    draw := 0; 
    select sum(t1.draws) into draw from (select A,B,C, case when (A != '_' and B != '_' and C != '_') then 1 else 0 end as draws from ticTacToe) t1 where t1.draws=1;

    if draw = 3 then
        dbms_output.put_line('The game has ended in a draw');
    else
        select A into v1 from ticTacToe where row_num = 1;
        select B into v2 from ticTacToe where row_num = 1;
        select C into v3 from ticTacToe where row_num = 1;
        select A into v4 from ticTacToe where row_num = 2;
        select B into v5 from ticTacToe where row_num = 2;
        select C into v6 from ticTacToe where row_num = 2;
        select A into v7 from ticTacToe where row_num = 3;
        select B into v8 from ticTacToe where row_num = 3;
        select C into v9 from ticTacToe where row_num = 3; 

            if ((v1 = player and v5 = player and v9 = player) or ---diagonal
                (v3 = player and v5 = player and v7 = player) or ---diagonal
                (v1 = player and v2 = player and v3 = player) or ---horizontal
                (v4 = player and v5 = player and v6 = player) or ---horizontal
                (v7 = player and v8 = player and v9 = player) or ---horizontal
                (v1 = player and v4 = player and v7 = player) or ---vertical
                (v2 = player and v5 = player and v8 = player) or ---vertical
                (v3 = player and v6 = player and v9 = player)) then ---vertical
                dbms_output.put_line(player||' wins!');
            else
                dbms_output.put_line('Next player up!');
            end if;
    end if; 
end;
/

create or replace procedure nextPlayer(player char, row_num int, col_char char) is

curr_player char; prev_player char; fieldnum char; 
wrongPlayer exception;

begin
    curr_player := upper(player);
    
    select player into prev_player from turns where turn_num = (select max(turn_num) from turns);
    
    if(curr_player != prev_player) then
        
        execute immediate ('select ' || to_char(col_char) || ' from ticTacToe where row_num = ' || row_num) into fieldnum;
        
        if curr_player = 'X' or curr_player = 'O' then
            if fieldnum = '_' then
                execute immediate ('update ticTacToe set ' || to_char(col_char) || ' = '''|| curr_player ||''' where row_num = ' || row_num);
                insert into turns (player) values (curr_player);
                commit;
            else 
                dbms_output.put_line('This box has been filled');
            end if;
        else
            dbms_output.put_line('Invalid player name. Please enter X or O only.');
        end if;
        displayGrid();
        checkWinner(curr_player);
    else
        raise wrongPlayer;
    end if;
    exception when wrongPlayer then dbms_output.put_line('Wrong player entered');
end;
/

exec resetGame();
---Test Case 1: X wins (Diagonal)
exec nextPlayer('x', 1, 'A');
exec nextPlayer('O', 3, 'B');
exec nextPlayer('X', 2, 'B');
exec nextPlayer('o', 3, 'A');
exec nextPlayer('X', 3, 'C');

exec resetGame();
---Test Case 2: O wins (Vertical)
exec nextPlayer('x', 1, 'B');
exec nextPlayer('O', 3, 'C');
exec nextPlayer('X', 1, 'A');
exec nextPlayer('o', 1, 'C');
exec nextPlayer('X', 2, 'A');
exec nextPlayer('o', 2, 'C');

exec resetGame();
---Test Case 3: X wins (Horizontal)
exec nextPlayer('x', 2, 'A');
exec nextPlayer('O', 3, 'C');
exec nextPlayer('X', 2, 'B');
exec nextPlayer('o', 1, 'C');
exec nextPlayer('X', 2, 'C');

exec resetGame();
---Test Case 4: Game ends in a draw when all boxes are filled
exec nextPlayer('x', 1, 'A');
exec nextPlayer('O', 3, 'B');
exec nextPlayer('X', 2, 'B');
exec nextPlayer('o', 3, 'C');
exec nextPlayer('X', 3, 'A');
exec nextPlayer('O', 2, 'A');
exec nextPlayer('X', 1, 'B');
exec nextPlayer('O', 1, 'C');
exec nextPlayer('X', 2, 'C');

exec resetGame();
---Test Case 5: Invalid player name entered
exec nextPlayer('x', 2, 'A');
exec nextPlayer('b', 3, 'C');

exec resetGame();
---Test Case 6: Wrong player entered X entered twice consecutively and O entered twice consecutively
exec nextPlayer('x', 2, 'A');
exec nextPlayer('x', 3, 'C');
exec nextPlayer('o', 2, 'B');
exec nextPlayer('X', 2, 'C');
exec nextPlayer('o', 1, 'C');
exec nextPlayer('o', 3, 'A');
exec nextPlayer('X', 3, 'A');
exec nextPlayer('o', 1, 'A');
exec nextPlayer('X', 1, 'B');
exec nextPlayer('o', 3, 'C');

exec resetGame();
---Test Case 7: Box has already been filled
exec nextPlayer('x', 2, 'A');
exec nextPlayer('o', 2, 'A');